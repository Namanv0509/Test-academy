name: Check Broken Images

on:
  pull_request:
    branches:
      - main

jobs:
  check-images:
    runs-on: ubuntu-latest
    env:
      CONTENT_DIR: content
      STATIC_DIR: static
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug directory structure
        run: |
          echo "Repository structure:"
          ls -R
          echo "Content directory exists: $([ -d "$CONTENT_DIR" ] && echo 'yes' || echo 'no')"
          echo "Static directory exists: $([ -d "$STATIC_DIR" ] && echo 'yes' || echo 'no')"
          echo "Markdown files in $CONTENT_DIR:"
          find "$CONTENT_DIR" -type f -name "*.md" || echo "No Markdown files found."

      - name: Validate Markdown Image Links
        run: |
          #!/bin/bash
          set -e -o pipefail -x
          
          IMAGE_EXTENSIONS="\.([pP][nN][gG]|\.([jJ][pP][gG]|\.([jJ][pP][eE][gG]|\.([gG][iI][fF]|\.([sS][vV][gG]|\.([wW][eE][bB][pP])$"
          BROKEN_IMAGES=0
          
          # Check if directories exist
          if [ ! -d "$CONTENT_DIR" ]; then
            echo "❌ Error: Content directory '$CONTENT_DIR' does not exist."
            exit 1
          fi
          if [ ! -d "$STATIC_DIR" ]; then
            echo "❌ Error: Static directory '$STATIC_DIR' does not exist."
            exit 1
          fi
          
          # Find all Markdown files
          echo "Scanning Markdown files in $CONTENT_DIR..."
          markdown_files=$(find "$CONTENT_DIR" -type f -name "*.md")
          if [ -z "$markdown_files" ]; then
            echo "ℹ️ No Markdown files found in $CONTENT_DIR. Assuming all image links are valid."
            exit 0
          fi
          
          echo "$markdown_files" | while read -r file; do
            echo "Processing $file"
            # Extract image paths
            grep -oE '!\[[^\]]*\]\([^\)]*\)' "$file" | while read -r img; do
              # Extract and clean image path
              img_path=$(echo "$img" | sed -E 's/!\[[^\]]*\]\(([^)]*)\)/\1/' | sed -E 's/(\?.*|\#.*)//' | xargs)
              
              # Check for empty paths
              if [ -z "$img_path" ]; then
                echo "❌ Error: Empty image path in $file: $img"
                BROKEN_IMAGES=1
                continue
              fi
              
              # Skip external URLs
              if [[ "$img_path" =~ ^https?:// ]]; then
                echo "ℹ️ Skipping external image in $file: $img_path"
                continue
              fi
              
              # Resolve absolute or relative paths
              if [[ "$img_path" == /* ]]; then
                img_full_path="$STATIC_DIR${img_path#/}"
              else
                img_full_path="$(dirname "$file")/$img_path"
              fi
              
              # Normalize path
              img_full_path=$(realpath -m "$img_full_path")
              
              # Check if path is within repository
              repo_root=$(pwd)
              if [[ ! "$img_full_path" == "$repo_root"* ]]; then
                echo "⚠️ Warning: Image path '$img_path' in $file resolves outside repository root: $img_full_path"
                BROKEN_IMAGES=1
                continue
              fi
              
              # Check if file exists and has valid extension
              echo "Checking image: $img_path -> $img_full_path"
              if [ ! -f "$img_full_path" ]; then
                echo "⚠️ Warning: Image file does not exist in $file: $img_path"
                BROKEN_IMAGES=1
                continue
              fi
              if ! echo "$img_full_path" | grep -qiE "$IMAGE_EXTENSIONS"; then
                echo "⚠️ Warning: Invalid image extension in $file: $img_path"
                BROKEN_IMAGES=1
                continue
              fi
            done
          done
          
          if [ $BROKEN_IMAGES -eq 0 ]; then
            echo "✅ All image links are valid."
          else
            echo "❌ Found broken or invalid image links."
            exit 1
          fi