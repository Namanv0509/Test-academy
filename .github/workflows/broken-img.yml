name: Hugo Image Validation
on:
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'content/**.md'
      - 'content/**.markdown'
      - 'static/images/**'
permissions:
  pull-requests: write
  issues: write

jobs:
  validate-images:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-frontmatter

      - name: Check image references
        run: |
          set -e
          
          # Valid image extensions
          VALID_EXTENSIONS="jpg|jpeg|png|gif|webp|svg"
          
          # Find all markdown files
          mapfile -t md_files < <(find content -type f \( -name "*.md" -o -name "*.markdown" \))
          
          exit_code=0
          error_messages=()
          valid_images=()
          
          for file in "${md_files[@]}"; do
            echo "Checking images in $file"
            
            # Extract all image references, including empty ones, with line numbers
            images=$(grep -nE '!\[[^\]]*]\([[:space:]]*[^\)]*\)' "$file" || true)
            
            if [[ -z "$images" ]]; then
              echo "No image references found in $file"
              continue
            fi
            
            echo "Found image references:"
            echo "$images"
            
            while IFS=: read -r line_num image_ref; do
              # Extract the image path from the full reference (e.g., ![alt](path))
              image_path=$(echo "$image_ref" | sed -E 's/.*\[[^\]]*]\(([[:space:]]*[^\)]*)\)/\1/' | sed 's/[[:space:]]*$//')
              full_ref=$(echo fit"$image_ref" | sed -E 's/^[0-9]+:(.*)$/\1/')
              
              # Check if image path is empty or whitespace-only
              if [[ -z "$image_path" || "$image_path" =~ ^[[:space:]]*$ ]]; then
                echo "::warning file=$file,line=$line_num::Empty or whitespace-only image reference found: $full_ref"
                error_messages+=("Empty or whitespace-only image reference ($full_ref) in $file at line $line_num")
                exit_code=1
                continue
              fi
              
              # Get the file extension (if any)
              extension=$(echo "$image_path" | grep -oE '\.[a-zA-Z0-9]+$' | tr '[:upper:]' '[:lower:]' || true)
              
              # Check if extension exists and is valid
              if [[ -z "$extension" ]]; then
                echo "::warning file=$file,line=$line_num::No file extension in image reference: $image_path"
                error_messages+=("No file extension ($image_path) in $file at line $line_num")
                exit_code=1
                continue
              elif [[ ! "$extension" =~ \.($VALID_EXTENSIONS)$ ]]; then
                echo "::warning file=$file,line=$line_num::Invalid image extension in $image_path. Valid extensions are: $VALID_EXTENSIONS"
                error_messages+=("Invalid image extension ($image_path) in $file at line $line_num")
                exit_code=1
                continue
              fi
              
              # Convert relative path to absolute (assuming images are in static/images)
              if [[ "$image_path" =~ ^/ ]]; then
                full_path="static${image_path}"
              else
                full_path="static/images/${image_path}"
              fi
              
              # Check if image file exists
              if [[ ! -f "$full_path" ]]; then
                echo "::warning file=$file,line=$line_num::Image not found: $image_path"
                error_messages+=("Image not found ($image_path) in $file at line $line_num")
                exit_code=1
              else
                valid_images+=("Valid image ($image_path) in $file at line $line_num")
              fi
            done <<< "$images"
          done
          
          # Write summary
          {
            if [[ ${#error_messages[@]} -gt 0 ]]; then
              echo "Image validation failed with the following issues:"
              printf '%s\n' "${error_messages[@]}"
            else
              echo "All image references are valid!"
            fi
            if [[ ${#valid_images[@]} -gt 0 ]]; then
              echo -e "\nValid image references:"
              printf '%s\n' "${valid_images[@]}"
            fi
          } > error_summary.txt
          
          if [[ $exit_code -ne 0 ]]; then
            echo "::error::Image validation failed. Please check the warnings above."
            exit 1
          fi

      - name: Upload error summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: image-validation-summary
          path: error_summary.txt
          if-no-files-found: error

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const result = '${{ job.status }}';
            const summaryFile = 'error_summary.txt';
            let message = result === 'success' 
              ? '✅ All image references in markdown files are valid!'
              : '❌ Image validation failed:\n\n';
            
            if (fs.existsSync(summaryFile)) {
              const summary = fs.readFileSync(summaryFile, 'utf8').trim();
              message += `\`\`\`\n${summary}\n\`\`\``;
            } else {
              message += 'No error summary available.';
            }
            
            message += '\n\nCheck the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });